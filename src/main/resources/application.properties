# /**
#  * Application Properties Configuration
#  * 
#  * This file contains the core configuration settings for the Spring Boot application.
#  * It defines database connections, file upload parameters, storage locations, and
#  * static resource handling. These properties are loaded automatically by Spring Boot
#  * at application startup and configure various components of the system.
#  * 
#  * Key configuration sections:
#  * - Application identity
#  * - Database connection settings
#  * - File upload limitations
#  * - File storage location
#  * - Static resource serving
#  * 
#  * These settings enable the application to connect to MariaDB, handle file uploads
#  * from users (especially for booking payment proofs), store files in a designated
#  * directory, and serve static resources like images and frontend assets.
#  */

# Application name - identifies this application in logs, metrics, and when using Spring Cloud
spring.application.name=Visual

# Database connection configuration
# URL specifies database type (MariaDB), server location (localhost), port (3306), and database name (LaVisual)
spring.datasource.url=jdbc:mariadb://localhost:3306/LaVisual
# Database username (root in this case - would typically use a dedicated user in production)
spring.datasource.username=root
# Database password (empty in this case - should always be secured in production)
spring.datasource.password=
# JDBC driver class that handles database communication
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
# Controls SQL initialization scripts (schema.sql, data.sql) - 'always' means run on every startup
spring.sql.init.mode=always

# File upload settings
# Enable multipart file uploads (needed for file upload functionality)
spring.servlet.multipart.enabled=true
# Maximum size for individual file uploads (10 megabytes)
spring.servlet.multipart.max-file-size=10MB
# Maximum size for the entire multipart request (10 megabytes)
spring.servlet.multipart.max-request-size=10MB

# Make sure this path is correct and accessible
# Defines where uploaded files will be stored on the server's file system
# This path is used by FileSystemStorageService via StorageProperties
file.upload-dir=E:/SpringBoot_Prac/LaVisual/Visual/upload-dir

# These settings help with static resource handling but are different from the API endpoint
# URL pattern for accessing static resources (CSS, JS, images) - will be served at /static/**
spring.mvc.static-path-pattern=/static/**
# Locations to look for static resources - both in classpath:/static/ and in the upload directory
spring.web.resources.static-locations=classpath:/static/,file:upload-dir/